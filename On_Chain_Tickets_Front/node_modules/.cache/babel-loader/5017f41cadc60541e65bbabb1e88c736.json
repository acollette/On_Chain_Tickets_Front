{"ast":null,"code":"var _jsxFileName = \"/Users/alexandrecollette/Documents/Solidity/TrueLabs/AraKiwi-Front/src/Components/Navbar/Mint.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Box, Button, makeStyles } from \"@material-ui/core\";\nimport normal from \"../../Assets/AraKiwiNormal.png\";\nimport bottle from \"../../Assets/AraKiwiFreeBottle.png\";\nimport backstage from \"../../Assets/AraKiwiBackstage.png\";\nimport { ethers } from 'ethers';\nimport AraKiwiJSON from \"../../SmartContracts/AraKiwiNFT.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0xBa50AFf0D0c0CE38BA18a69262f85E531BF6c96F\";\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\nconst signer = provider.getSigner();\nconst contract = new ethers.Contract(contractAddress, AraKiwiJSON.abi, signer);\nconst images = [normal, bottle, backstage];\nconst useStyles = makeStyles(theme => ({\n  image: {\n    width: \"300px\"\n  },\n  box: {\n    padding: 25\n  },\n  button1: {\n    backgroundColor: \"#80cbc4\"\n  },\n  button2: {\n    backgroundColor: \"#fff3e0\"\n  },\n  balance: {\n    paddingTop: 15\n  }\n}));\n\nconst Mint = () => {\n  _s();\n\n  const [index, setIndex] = useState(0);\n  const classes = useStyles();\n  const [balance, setBalance] = useState(\"\");\n  const [totalMinted, setTotalMinted] = useState(0);\n\n  const getBalance = async () => {\n    const [account] = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    const balance = await provider.getBalance(account); //balance will be in Big Number, we have to format it:\n\n    setBalance(ethers.utils.formatEther(balance));\n  };\n\n  const mintToken = async () => {\n    //const provider = new ethers.providers.Web3Provider(window.ethereum)\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    const addr = accounts[0];\n    const CID = \"QmRPXFVb5vu13GWaEQNGwckGsJGFjoHjWL4ce6UZMMn5MU\"; //parseMint count\n\n    const getTokenId = async () => {\n      const count = await contract.count();\n      console.log(count);\n      const countId = parseInt(count);\n      return countId;\n    };\n\n    const tokenId = await getTokenId();\n    const metadataURI = `${CID}/${tokenId}.json`;\n    const result = await contract.payToMint(addr, metadataURI, {\n      value: ethers.utils.parseEther(\"0.01\")\n    });\n    await result.wait();\n  };\n\n  const getCount = async () => {\n    const count = await contract.count();\n    setTotalMinted(parseInt(count));\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (index === images.length - 1) {\n        setIndex(0);\n      } else {\n        setIndex(index + 1);\n      }\n    }, 3500);\n    return () => {\n      clearInterval(interval);\n    };\n  });\n  useEffect(() => {\n    getCount();\n  }, []);\n\n  const getMintedStatus = async () => {\n    const tokenURI = await contract.tokenURI(1);\n    console.log(tokenURI);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.box\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_s(Mint, \"iCZBXyGCVHJadg5vFnuVTElPucY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/Users/alexandrecollette/Documents/Solidity/TrueLabs/AraKiwi-Front/src/Components/Navbar/Mint.js"],"names":["React","useState","useEffect","Box","Button","makeStyles","normal","bottle","backstage","ethers","AraKiwiJSON","contractAddress","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","abi","images","useStyles","theme","image","width","box","padding","button1","backgroundColor","button2","balance","paddingTop","Mint","index","setIndex","classes","setBalance","totalMinted","setTotalMinted","getBalance","account","request","method","utils","formatEther","mintToken","accounts","addr","CID","getTokenId","count","console","log","countId","parseInt","tokenId","metadataURI","result","payToMint","value","parseEther","wait","getCount","interval","setInterval","length","clearInterval","getMintedStatus","tokenURI"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport {Box, Button, makeStyles} from \"@material-ui/core\"\nimport normal from \"../../Assets/AraKiwiNormal.png\"\nimport bottle from \"../../Assets/AraKiwiFreeBottle.png\"\nimport backstage from \"../../Assets/AraKiwiBackstage.png\"\nimport {ethers} from 'ethers'\nimport AraKiwiJSON from \"../../SmartContracts/AraKiwiNFT.json\"\n\nconst contractAddress = \"0xBa50AFf0D0c0CE38BA18a69262f85E531BF6c96F\"\nconst provider = new ethers.providers.Web3Provider(window.ethereum)\nconst signer = provider.getSigner()\nconst contract = new ethers.Contract(contractAddress, AraKiwiJSON.abi, signer)\n\n\n\n\nconst images = [normal, bottle, backstage]\n\nconst useStyles = makeStyles((theme)=>({\n    image: {\n        width: \"300px\",\n    },\n    box: {\n        padding: 25,\n    },\n    button1:{\n        backgroundColor: \"#80cbc4\",\n    \n    },\n    button2:{\n        backgroundColor: \"#fff3e0\",\n    \n    },\n    balance:{\n        paddingTop: 15,\n    }\n    \n\n    \n}))\n\n\nconst Mint = () => {\n\n        const [index, setIndex] = useState(0);\n        const classes = useStyles()\n        const [balance, setBalance] = useState(\"\")\n        const [totalMinted, setTotalMinted] = useState(0)\n        \n\n        const getBalance = async () =>{\n            const [account] = await window.ethereum.request({method: \"eth_requestAccounts\"})\n            const balance = await provider.getBalance(account)\n            //balance will be in Big Number, we have to format it:\n            setBalance(ethers.utils.formatEther(balance))\n            \n        }\n\n        const mintToken = async () => {\n            //const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            })\n\n            const addr = accounts[0]\n\n            const CID = \"QmRPXFVb5vu13GWaEQNGwckGsJGFjoHjWL4ce6UZMMn5MU\"\n            //parseMint count\n            const getTokenId = async () => {\n                const count = await contract.count()\n                console.log(count)\n                const countId = parseInt(count)\n                return countId\n            }\n\n            const tokenId = await getTokenId()\n\n\n            const metadataURI = `${CID}/${tokenId}.json`\n            \n\n            const result = await contract.payToMint(addr, metadataURI, {\n                value: ethers.utils.parseEther(\"0.01\"),\n            })\n\n            await result.wait()\n\n        }\n\n\n        const getCount = async () =>{\n            const count = await contract.count()\n            setTotalMinted(parseInt(count))\n        }\n\n\n        useEffect(() => {\n          const interval = setInterval(() => {\n              if(index === images.length - 1  ){\n                  setIndex(0)\n              }\n              else{\n                setIndex(index +1)\n              }\n          }, 3500);\n\n          return () => {\n              clearInterval(interval)\n          }\n          \n        },);\n\n        useEffect(() => {\n            getCount();\n          }, []);\n\n\n        const getMintedStatus = async () => {\n            const tokenURI = await contract.tokenURI(1)\n            console.log(tokenURI)\n        }\n\n      \n        return(\n            <>\n                <Box className={classes.box}>\n                  \n                </Box>\n\n            </>\n         )\n\n   \n\n}\n\nexport default Mint"]},"metadata":{},"sourceType":"module"}